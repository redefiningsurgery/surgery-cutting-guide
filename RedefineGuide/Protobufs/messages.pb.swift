// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Requests_GetModelOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: String = String()

  var model: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Requests_GetPositionInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: String = String()

  var depthMap: Data = Data()

  var rgbImage: Data = Data()

  /// A 4x4 row-major matrix of the position and orientation of the object in world coordinate space
  /// https://developer.apple.com/documentation/arkit/arcamera/2866108-transform
  var transform: [Float] = []

  /// A 3x3 row-major matrix that converts between the 2D camera plane and 3D world coordinate space.
  var intrinsics: [Float] = []

  /// Camera intrinsics
  var fx: Float = 0

  var fy: Float = 0

  var ox: Float = 0

  var oy: Float = 0

  var optimizeForSpeed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Requests_GetPositionOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A 4x4 row-major matrix of the position and orientation of the object in world coordinate space
  var transform: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Requests_GetModelOutput: @unchecked Sendable {}
extension Requests_GetPositionInput: @unchecked Sendable {}
extension Requests_GetPositionOutput: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "requests"

extension Requests_GetModelOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetModelOutput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_id"),
    2: .same(proto: "model"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.model) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 1)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularBytesField(value: self.model, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Requests_GetModelOutput, rhs: Requests_GetModelOutput) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.model != rhs.model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Requests_GetPositionInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPositionInput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_id"),
    2: .standard(proto: "depth_map"),
    3: .standard(proto: "rgb_image"),
    4: .same(proto: "transform"),
    5: .same(proto: "intrinsics"),
    10: .same(proto: "fx"),
    11: .same(proto: "fy"),
    12: .same(proto: "ox"),
    13: .same(proto: "oy"),
    14: .standard(proto: "optimize_for_speed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.depthMap) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.rgbImage) }()
      case 4: try { try decoder.decodeRepeatedFloatField(value: &self.transform) }()
      case 5: try { try decoder.decodeRepeatedFloatField(value: &self.intrinsics) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.fx) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.fy) }()
      case 12: try { try decoder.decodeSingularFloatField(value: &self.ox) }()
      case 13: try { try decoder.decodeSingularFloatField(value: &self.oy) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self.optimizeForSpeed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 1)
    }
    if !self.depthMap.isEmpty {
      try visitor.visitSingularBytesField(value: self.depthMap, fieldNumber: 2)
    }
    if !self.rgbImage.isEmpty {
      try visitor.visitSingularBytesField(value: self.rgbImage, fieldNumber: 3)
    }
    if !self.transform.isEmpty {
      try visitor.visitPackedFloatField(value: self.transform, fieldNumber: 4)
    }
    if !self.intrinsics.isEmpty {
      try visitor.visitPackedFloatField(value: self.intrinsics, fieldNumber: 5)
    }
    if self.fx != 0 {
      try visitor.visitSingularFloatField(value: self.fx, fieldNumber: 10)
    }
    if self.fy != 0 {
      try visitor.visitSingularFloatField(value: self.fy, fieldNumber: 11)
    }
    if self.ox != 0 {
      try visitor.visitSingularFloatField(value: self.ox, fieldNumber: 12)
    }
    if self.oy != 0 {
      try visitor.visitSingularFloatField(value: self.oy, fieldNumber: 13)
    }
    if self.optimizeForSpeed != false {
      try visitor.visitSingularBoolField(value: self.optimizeForSpeed, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Requests_GetPositionInput, rhs: Requests_GetPositionInput) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.depthMap != rhs.depthMap {return false}
    if lhs.rgbImage != rhs.rgbImage {return false}
    if lhs.transform != rhs.transform {return false}
    if lhs.intrinsics != rhs.intrinsics {return false}
    if lhs.fx != rhs.fx {return false}
    if lhs.fy != rhs.fy {return false}
    if lhs.ox != rhs.ox {return false}
    if lhs.oy != rhs.oy {return false}
    if lhs.optimizeForSpeed != rhs.optimizeForSpeed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Requests_GetPositionOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPositionOutput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transform"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedFloatField(value: &self.transform) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transform.isEmpty {
      try visitor.visitPackedFloatField(value: self.transform, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Requests_GetPositionOutput, rhs: Requests_GetPositionOutput) -> Bool {
    if lhs.transform != rhs.transform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
